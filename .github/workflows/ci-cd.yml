name: CI/CD Pipeline

on:
  push:
    branches:
      - develop # Triggers pipeline when pushing to main
  pull_request:
    branches:
      - develop

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 (or your preferred version)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      # Step 4: Run tests
      - name: Run tests
        run: mvn test

      # Step 5: Build the application
      - name: Build application
        run: mvn package -DskipTests

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build Docker image (if applicable)
      - name: Build Docker image
        run: |
          docker build -t my-spring-boot-app .

      # Step 4: Push Docker image to Docker Hub (optional)
      - name: Push Docker image to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag my-spring-boot-app my-dockerhub-user/my-spring-boot-app:latest
          docker push my-dockerhub-user/my-spring-boot-app:latest

      # Step 5: Deploy to server
      - name: Deploy to server
        run: |
          ssh -i ${{ secrets.SSH_PRIVATE_KEY }} user@server "docker pull my-dockerhub-user/my-spring-boot-app:latest && docker run -d -p 8080:8080 my-dockerhub-user/my-spring-boot-app:latest"
